There are several concepts introduced in the Resources framework with which you may not be familiar.

It may help you to understand the rest of the documentation if you familiarize yourself with these first.

h2. Resources

By resources we mean typically static resources that are used to render your application views, or other files served to your users.

This includes CSS, JavaScript and usually some icons and images.

h2. Modules

In the resources framework, you define resource modules that have a name and contain one or more resources. You use GSP tags to indicate which modules your pages need.

h2. Module dependencies

Specifying module dependencies means that you don't have to worry about the order of resource inclusion in your pages. By telling the framework which modules require other modules, you allow it to decide the correct order.

Just like Grails transitive dependencies, this will pull in all the modules required if you require one module that has other dependencies.

h2. Mappers

Resource mappers are Grails artefacts that participate in the processing of resources. You start with a copy of the original resource, and after applying all the necessary mappers, you have the - typically mutated - final file to serve to users.

Mappers can modify and/or move and rename the file.

The person who declares resources can choose to exclude specific mappers per-resource, to prevent double-processing of resources that have been supplied pre-processed, such as pre-minified JS libraries.

h2. Mapper phases

Resource mappers are applied in a specific order, denoted by a series of well-defined phases. This ensures that the right processing happens at the right times.

h2. Mapper operation

Resource mappers often have an "operation" grouping, for example Yahoo UI and Google CSS minifier mappers might both have the operation name "minify", but unique mapper names. This allows the user to exclude a whole family of mappers on a per-resource basis.

h2. Undeclared Resources

Undeclared resources are those that you link to using the Resources framework tags such as [require|Tags], [img|Tags] and [external|Tags] (or Grails 1.4 and higher g:resource/g:img and other linking tags that are resources-aware) but you *did not explicitly declare in any modules*.

h2. Ad-hoc/Legacy Resources

Ad-hoc resources are tags that do not use the Resources mechanisms to create their links. Prior to Grails 1.4 this means links created with g:xxx tags instead of the r:xxx tags and hardcoded links to resources. For Grails 1.4 and higher these can only occur for hardcoded links to resources.

h2. Bundling

Bundling is the act of aggregating two or more resources of the same type into one file. This reduces the number of requests the browser must make to your site, thus speeding up the page load time.
 
h2. CSS Rewriting

Rewriting CSS is the act of changing any URLs in your CSS files so that they continue to point to the correct resource even if the CSS is bundled into a new file and/or moved to a new location in the filesystem.

When you bundle files, or move them to reduce link URL size (as the Cached-Resources plugin does), without URL rewriting this would break the links from your bundled file to other resources.

h2. Disposition

The disposition of a resource indicates where in the response you would like the link to appear. By default the "head" disposition causes links to be rendered in the <head> section, and "defer" disposition causes links to JavaScript to be rendered at the end of the body.
